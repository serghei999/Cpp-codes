#include <iostream>
#include <math.h>
using namespace std;
#define PI 4.0*atan(1.0) // autre manière de définir pi: const double pi=4.0*atan(1.0);
double CDF(double);
double bsCall(double S, double K, double r, double v, double q, double T)
{
double d1 = (log(S/K)+(r-q+0.5*v*v)*T)/(v*sqrt(T));
double d2 = d1 - v*sqrt(T);
double N1 = CDF(d1);
double N2 = CDF(d2);

double C = S*N1*exp(-q*T)-K*N2*exp(-r*T);

return C;
}
double Delta(double S, double K, double r, double v, double q, double T)
{
double d1 = (log(S/K)+(r-q+0.5*v*v)*T)/(v*sqrt(T));
double N1 = CDF(d1);
 double del= exp(-q*T)*N1;
return del;
}
double GeometricAsian(double S, double K, double r, double v, double q, double T, int N)
{
 double dt = T / N;
 double nu = r - q - 0.5 * v * v;
 double a = N * (N + 1) * (2.0 * N + 1.0) / 6.0;
 double V = exp(-r * T) * S * exp(((N + 1.0) * nu / 2.0 + v * v * a / (2.0 * N * N)) * dt);
 double vavg = v * sqrt(a) / (pow(N, 1.5));
 double val = bsCall(V, K, r, vavg, q, T);

 return val;
}
double GeometricAsianDelta(double S, double K, double r, double v, double q, double T,
int N) {
 double dt = T / N;
 double nu = r - q - 0.5 * v * v;
 double a = N * (N + 1) * (2.0 * N + 1.0) / 6.0;
 double V = exp(-r * T) * S * exp(((N + 1.0) * nu / 2.0 + v * v * a / (2.0 * N * N)) * dt);
 double vavg = v * sqrt(a) / (pow(N, 1.5));

 double d1 = (log(V/K)+(r - q + 0.5*vavg*vavg)*T)/(vavg*sqrt(T));
 double N1 = CDF(d1);

 double delta = exp(-r*T)*exp(-q*T)*N1*exp(((N + 1.0) * nu / 2.0 + v * v * a / (2.0 * N *
N)) * dt);

 return delta;
}
int main()
{
double S = 106.04;
double K = 102;
double r = .0386;
double v = .22;
double T = 0.9778 ;
int N = 12;
 double q = 0.0;

 double DeltaA = GeometricAsianDelta(S,K, r, v, q, T, N);
cout.precision(4);

double CallPrc = GeometricAsian(S,K, r, v, q, T, N);
cout.precision(5);

 double Prc = bsCall(S, K, r, v, q, T);
 double delta = Delta(S,K,r,v,q,T);

 double put = Prc + K*exp(-r*T)- S*exp(-q*T);

 cout << "S = " << S << endl;
 cout << " " << endl;

 cout << "Le prix du Call  = " << Prc << endl;
 cout << "Le delta du Call  = " << delta << endl;
 cout << " " << endl;

 cout << "Le prix du Call Asiatique = " << CallPrc << endl;
 cout << "Le Delta du Call Asiatique = " << DeltaA << endl;
 cout << " " << endl;

 cout << "Le prix du Put = " << put << endl;
 cout << "Le Delta du Put  = " << delta - exp(-v*T) << endl;
 cout << " " << endl;



return 0;
}
double CDF(double X)
{
const double a1=0.319381530, a2=-0.356563782, a3=1.781477937, a4=-
1.821255978, a5=1.330274429;
double x=0, k=0;
double N, CDF, n;
x=fabs(X); // x est la valeur absolue de X
// La formule standart d'approximer la fonciton de densité de la loi normale
k=1/(1+0.2316419*x);
n=(1/sqrt(2*PI))*exp(-0.5*x*x);
N=1-n*(a1*k+a2*k*k+a3*pow(k,3)+a4*pow(k,4)+a5*pow(k,5));
if (X>=0)
CDF=N;
else
CDF=1-N;
return CDF;
}
